theme(legend. position = "none")
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") + scale_color_gradient2(low = "red",  high = "blue",  midpoint = 0,
guide = "colourbar",
aesthetics = "colour")
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") + scale_color_gradient2(low = "red",  high = "blue",  midpoint = 0)
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F) +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") +
scale_color_gradient2(low = "red",  high = "blue",  midpoint = 0) +
theme(legend.position = "none")
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F, col="black") +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") +
scale_color_gradient2(low = "red",  high = "blue",  midpoint = 0) +
theme(legend.position = "none")
# test correlation
cor(electionData$rateChange, electionData$margin)
# create data frame
electionData = data.frame(rateChange = (covid$Oct_2020_Deaths-covid$June_2020_Deaths)/covid$Total.Population*100000, margin = election * 100)
# plot election data
ggplot(data = electionData,
aes(x = margin,
y = rateChange,
color = margin)) +
geom_point()  +
geom_smooth(method="lm", se=F, col="black") +
ggtitle(expression(atop("Election Result and Change in COVID Deaths", atop(italic("By: Peter Zhang"), ""))))+
xlab("Biden Percent Margin of Victory") +
ylab("Change in Deaths per 100K") +
scale_color_gradient2(low = "red", mid="grey", high = "blue",  midpoint = 0) +
theme(legend.position = "none")
# test correlation
cor(electionData$rateChange, electionData$margin)
read.csv("matched.csv")
read.csv("matched.csv")
read.csv("~/GitHub/HousingPrices/matched.csv")
data <- read.csv("~/GitHub/HousingPrices/matched.csv")
cor((data$Cases.9.30.2020-data$Cases.8.31.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Cases.9.30.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Cases.9.30.2020-data$Cases.6.30.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Cases.9.30.2020-data$Cases.7.31.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Cases.7.31.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Deaths.9.30.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Deaths.9.30.2020-data$Cases.7.31.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Deaths.9.30.2020-data$Cases.8.31.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Deaths.9.30.2020-data$Cases.6.30.2020)/data$Population_2019, data$dem-data$rep)
cor((data$Deaths.9.30.2020-data$Cases.5.31.2020)/data$Population_2019, data$dem-data$rep)
knitr::opts_chunk$set(echo = TRUE)
sample_avg = 81/100
sample_se = 0.6/sqrt(100)
sample_avg - sample_se
sample_avg + sample_se
percent = 36/81
percent_sd = sqrt(36/81*(81-36)/81)
percent_se = percent_sd
percent = 36/81
percent_sd = sqrt(36/81*(81-36)/81)
percent_se = percent_sd/sqrt(81)
percent - percent_se
percent + percent_se
slope = -0.2*15/2
slope = -0.2*15/2
intercept = 66-slope*6
slope = -0.2*15/2
intercept = 66-slope*6
slope
intercept
slope*(3/2)
avg = 66 + (4-6) * slope
se = sqrt(1-(-0.2)^2) * 15
cutoff = 66+15*qnorm(0.8)
z_score = (cutoff-avg)/se
1-pnorm(z_score)
t.test(c(32.5, 33.1, 31.8, 33.6, 34),
alternative = 'less',
mu = 34)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
1-pt(tstat, df=4)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
tstat
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
1-pt(q, df)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
1-pt(q, df=4)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
1-pt(tstat, df=4)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
tstat
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
seavg
tstat = (mean(obs) - 34)/seavg
tstat
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sd(obv)/sqrt(5)
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sd(obs)/sqrt(5)
tstat = (mean(obs) - 34)/seavg
tstat
obs = c(32.5, 33.1, 31.8, 33.6, 34)
sdplus = sqrt(5/(5-1)) * sd(obs)
seavg = sdplus/sqrt(5)
tstat = (mean(obs) - 34)/seavg
pt(tstat, df=4)
t.test(obs,
alternative = 'less',
mu = 34)
se1 = 10/sqrt(350)
se2 = 9/sqrt(100)
sepooled = sqrt(se1^2+se2^2)
diff = 14-15
z_stat = diff/sepooled
pnorm(z_stat)
se1 = 10/sqrt(350)
se2 = 9/sqrt(100)
sepooled = sqrt(se1^2+se2^2)
diff = 14-15
z_stat = diff/sepooled
pnorm(z_stat)*2
num_dem = 0.4
num_ind = 0.25
num_rep = 0.35
num_iso = num_dem * 0.66 + num_ind * 0.45 + num_rep * 0.32
num_uniso = 1-num_iso
exp_dem_iso = num_dem * num_iso
exp_dem_unsio = num_dem*num_uniso
exp_ind_iso = num_ind * num_iso
exp_ind_unsio = num_ind*num_uniso
exp_rep_iso = num_rep * num_iso
exp_rep_unsio = num_rep*num_uniso
chisq_stat = (num_dem*0.66-exp_dem_iso)^2/exp_dem_iso + (num_dem*0.34-exp_dem_uniso)^2/exp_dem_uniso + (num_ind*0.45 - exp_ind_iso)^2/exp_ind_iso + (num_ind*0.55 - exp_ind_uniso)^2/exp_ind_uniso + (num_rep * 0.32 - exp_rep_iso)^2/exp_rep_iso + (num_rep * 0.68 - exp_rep_uniso)^2/exp_rep_uniso
num_dem = 0.4
num_ind = 0.25
num_rep = 0.35
num_iso = num_dem * 0.66 + num_ind * 0.45 + num_rep * 0.32
num_uniso = 1-num_iso
exp_dem_iso = num_dem * num_iso
exp_dem_uniso = num_dem*num_uniso
exp_ind_iso = num_ind * num_iso
exp_ind_uniso = num_ind*num_uniso
exp_rep_iso = num_rep * num_iso
exp_rep_uniso = num_rep*num_uniso
chisq_stat = (num_dem*0.66-exp_dem_iso)^2/exp_dem_iso + (num_dem*0.34-exp_dem_uniso)^2/exp_dem_uniso + (num_ind*0.45 - exp_ind_iso)^2/exp_ind_iso + (num_ind*0.55 - exp_ind_uniso)^2/exp_ind_uniso + (num_rep * 0.32 - exp_rep_iso)^2/exp_rep_iso + (num_rep * 0.68 - exp_rep_uniso)^2/exp_rep_uniso
pchisq(chisq_stat, df = 2)
chisq.test(x=c(c(0.1, 0.2), c(0.3, 0.5), c(0.3, 0.5)))
chisq.test(x=data.frame(one = c(0.1, 0.2), two = c(0.3, 0.5))))
chisq.test(x=data.frame(one = c(0.1, 0.2), two = c(0.3, 0.5)))
chisq.test(x=data.frame(iso = c(0.4*0.66, 0.25*0.45, 0.34*0.32), two = c(0.4*0.34, 0.25*0.55, 0.34*0.68)))
chisq.test(x=data.frame(iso = c(3000*0.4*0.66, 3000*0.25*0.45, 3000*0.34*0.32), two = c(3000*0.4*0.34, 3000*0.25*0.55, 3000*0.34*0.68)))
num_dem = 0.4
num_ind = 0.25
num_rep = 0.35
num_iso = num_dem * 0.66 + num_ind * 0.45 + num_rep * 0.32
num_uniso = 1-num_iso
exp_dem_iso = num_dem * num_iso
exp_dem_uniso = num_dem*num_uniso
exp_ind_iso = num_ind * num_iso
exp_ind_uniso = num_ind*num_uniso
exp_rep_iso = num_rep * num_iso
exp_rep_uniso = num_rep*num_uniso
chisq_stat = (num_dem*0.66-exp_dem_iso)^2/exp_dem_iso + (num_dem*0.34-exp_dem_uniso)^2/exp_dem_uniso + (num_ind*0.45 - exp_ind_iso)^2/exp_ind_iso + (num_ind*0.55 - exp_ind_uniso)^2/exp_ind_uniso + (num_rep * 0.32 - exp_rep_iso)^2/exp_rep_iso + (num_rep * 0.68 - exp_rep_uniso)^2/exp_rep_uniso
pchisq(chisq_stat*3000, df = 2)
num_dem = 0.4
num_ind = 0.25
num_rep = 0.35
num_iso = num_dem * 0.66 + num_ind * 0.45 + num_rep * 0.32
num_uniso = 1-num_iso
exp_dem_iso = num_dem * num_iso
exp_dem_uniso = num_dem*num_uniso
exp_ind_iso = num_ind * num_iso
exp_ind_uniso = num_ind*num_uniso
exp_rep_iso = num_rep * num_iso
exp_rep_uniso = num_rep*num_uniso
chisq_stat = (num_dem*0.66-exp_dem_iso)^2/exp_dem_iso + (num_dem*0.34-exp_dem_uniso)^2/exp_dem_uniso + (num_ind*0.45 - exp_ind_iso)^2/exp_ind_iso + (num_ind*0.55 - exp_ind_uniso)^2/exp_ind_uniso + (num_rep * 0.32 - exp_rep_iso)^2/exp_rep_iso + (num_rep * 0.68 - exp_rep_uniso)^2/exp_rep_uniso
chisq_stat*3000
pchisq(chisq_stat*3000, df = 2)
chisq.test(x=data.frame(iso = c(3000*0.4*0.66, 3000*0.25*0.45, 3000*0.35*0.32), two = c(3000*0.4*0.34, 3000*0.25*0.55, 3000*0.35*0.68)))
setwd("~/GitHub/Politics-COVID")
read.csv("matched.csv")
dataset <- read.csv("matched.csv")
data <- read.csv("matched.csv")
data$caseRate = (data$Cases.9.30.2020-data$Cases.6.30.2020)/data$Population_2019
cor(data$caseRate, data$Population.Density)
cor(data$caseRate, data$diff)
data$deathRate = (data$Deaths.9.30.2020-data$Deaths.6.30.2020)/data$Population_2019
cor(data$deathRate, data$diff)
data$caseRate = (data$Cases.9.30.2020-data$Cases.7.30.2020)/data$Population_2019
data$deathRate = (data$Deaths.9.30.2020-data$Deaths.7.30.2020)/data$Population_2019
data$caseRate = (data$Cases.9.30.2020-data$Cases.7.31.2020)/data$Population_2019
data$deathRate = (data$Deaths.9.30.2020-data$Deaths.7.31.2020)/data$Population_2019
cor(data$deathRate, data$diff)
data$deathRate = (data$Deaths.9.30.2020-data$Deaths.8.31.2020+ data$Deaths.7.31.2020-data$Deaths.6.30.2020)/data$Population_2019
cor(data$deathRate, data$diff)
data$deathRate = (data$Deaths.9.30.2020-data$Deaths.8.31.2020)/(data$Deaths.7.31.2020-data$Deaths.6.30.2020)
cor(data$deathRate, data$diff)
data <- read.csv("covid.csv")
data <- read.csv("sources/covid.csv")
data$deathIncrease = (data$Oct_2020_Deaths-data$June_2020_Deaths)/data$Total.Population
data <- read.csv("sources/covid.csv")
data$deathIncrease = (data$Oct_2020_Deaths-data$June_2020_Deaths)/data$Total.Population
data$party = data$
d
cor(data$deathIncrease, data$Biden_Margin)
cor(data$deathIncrease, data$Depression.2020)
data <- read.csv("sources/covid.csv")
data$deathIncrease = (data$Oct_2020_Deaths-data$June_2020_Deaths)/data$Total.Population
cor(data$deathIncrease, data$Biden_Margin)
cor(data$deathIncrease, data$)
cor(data$deathIncrease, data$Income)
cor(data$deathIncrease, as.numeric(data$Income))
linear.1 <- lm(deathIncrease ~ Biden_Margin + Income,
data=data)
linear.1
library(stargazer)
install.packages("stargazer")
library(stargazer)
stargazer(linear.1)
linear.1 <- lm(deathIncrease ~ Biden_Margin,
data=data)
stargazer(linear.1)
data$Income = as.numeric(data$Income)
linear.1 <- lm(deathIncrease ~ Biden_Margin + Income,
data=data)
stargazer(linear.1)
linear.1
stargazer(linear.1)
cor(data$Biden_Margin, data$Income)
linear.1 <- lm(deathIncrease ~ Biden_Margin + Income,
data=data)
linear.1
stargazer(linear.1)
linear.1 <- lm(deathIncrease ~ Biden_Margin + Income + Total.number..adults.age.65.and.older,
data=data)
linear.1
stargazer(linear.1)
data$Boomers = data$Total.number..adults.age.65.and.older
data$Boomers = data$Total.number..adults.age.65.and.older/data$Total.Population
linear.1 <- lm(deathIncrease ~ Biden_Margin + Income + Total.number..adults.age.65.and.older,
data=data)
linear.1
linear.1 <- lm(deathIncrease ~ Biden_Margin + Income + Boomers,
data=data)
linear.1
stargazer(linear.1)
install.packages("summ")
summ(linear.1)
install.packages("jtools")
library(jtools)
summ(linear.1)
data$deathIncrease = (data$Oct_2020_Deaths-data$June_2020_Deaths)/data$Total.Population*100000
cor(data$deathIncrease, data$Biden_Margin)
cor(data$deathIncrease, data$Income)
data$Boomers = data$Total.number..adults.age.65.and.older/data$Total.Population
linear.1 <- lm(deathIncrease ~ Biden_Margin + Income + Boomers,
data=data)
summ(linear.1)
data$Oct_2020_DeathRate = data$Oct_2020_Deaths/data$Total.Population*100000
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin + Income + Boomers,
data=data)
summ(linear.1)
install.packages("jtools")
library(jtools)
data <- read.csv("sources/covid.csv")
data$Income = as.numeric(data$Income)
data$deathIncrease = (data$Oct_2020_Deaths-data$June_2020_Deaths)/data$Total.Population*100000
data$Oct_2020_DeathRate = data$Oct_2020_Deaths/data$Total.Population*100000
cor(data$deathIncrease, data$Biden_Margin)
cor(data$deathIncrease, data$Income)
data$Boomers = data$Total.number..adults.age.65.and.older/data$Total.Population
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin + Income + Boomers,
data=data)
summ(linear.1)
library(jtools)
data <- read.csv("sources/covid.csv")
data$Income = as.numeric(data$Income)
data$deathIncrease = (data$Oct_2020_Deaths-data$June_2020_Deaths)/data$Total.Population*100000
data$Oct_2020_DeathRate = data$Oct_2020_Deaths/data$Total.Population*100000
cor(data$deathIncrease, data$Biden_Margin)
cor(data$deathIncrease, data$Income)
data$Boomers = data$Total.number..adults.age.65.and.older/data$Total.Population
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin + Income + Boomers + ,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin + Income + Boomers + Density,
data=data)
(linear.1)
summ(linear.1)
data$Density = as.numeric(data$Density)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin + Income + Boomers + Density,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin + Income + Boomers + Density,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin + Income + Boomers + Density,
data=data)
summ(linear.1)
data <- read.csv("sources/covid.csv")
data$Income = as.numeric(data$Income)
data$Density = as.numeric(data$Density)
data$Testing = as.numeric(data$Testing)
cor(data$Oct_2020_Cases, data$Testing)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin + Income + Boomers + Density + Testing,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin + Income + Boomers + Density + Testing,
data=data)
data$deathIncrease = (data$Oct_2020_Deaths-data$June_2020_Deaths)/data$Total.Population*100000
data$Oct_2020_DeathRate = data$Oct_2020_Deaths/data$Total.Population*100000
cor(data$deathIncrease, data$Biden_Margin)
cor(data$deathIncrease, data$Income)
data$Boomers = data$Total.number..adults.age.65.and.older/data$Total.Population
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin + Income + Boomers + Density + Testing,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_Deaths ~ Biden_Margin + Income + Boomers + Density + Testing,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_Deaths ~ Biden_Margin + Income + Boomers + Density + Testing,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin + Income + Boomers + Density + Testing,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_deathIncrease ~ Biden_Margin + Income + Boomers + Density + Testing,
data=data)
summ(linear.1)
linear.1 <- lm(deathIncrease ~ Biden_Margin + Income + Boomers + Density + Testing,
data=data)
summ(linear.1)
linear.1 <- lm(deathIncrease ~ Biden_Margin+ Density + Testing + Income + Boomers ,
data=data)
summ(linear.1)
data$caseIncrease = (data$Oct_2020_Cases-data$June_2020_Cases)/data$Total.Population*100000
linear.1 <- lm(caseIncrease ~ Biden_Margin+ Density + Testing + Income + Boomers ,
data=data)
summ(linear.1)
linear.1 <- lm(deathIncrease ~ Biden_Margin+ Density + Testing + Income + Boomers ,
data=data)
summ(linear.1)
linear.1 <- lm(caseIncrease ~ Biden_Margin+ Density + Testing + Income + Boomers ,
data=data)
summ(linear.1)
data$Testing
cor(data$Testing, data$caseIncrease)
cor(data$Testing, data$Oct_2020_Cases)
linear.1 <- lm(caseIncrease ~ Biden_Margin+ Density + Testing + Income + Boomers ,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_Cases ~ Biden_Margin+ Density + Testing + Income + Boomers ,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_Cases/Total.Population ~ Biden_Margin+ Density + Testing + Income + Boomers ,
data=data)
summ(linear.1)
data <- read.csv("sources/covid.csv")
data$Income = as.numeric(data$Income)
data$Density = as.numeric(data$Density)
data$Testing = as.numeric(data$Testing)
data$deathIncrease = (data$Oct_2020_Deaths-data$June_2020_Deaths)/data$Total.Population*100000
data$caseIncrease = (data$Oct_2020_Cases-data$June_2020_Cases)/data$Total.Population*100000
data$Oct_2020_DeathRate = data$Oct_2020_Deaths/data$Total.Population*100000
cor(data$deathIncrease, data$Biden_Margin)
cor(data$deathIncrease, data$Income)
data$Boomers = data$Total.number..adults.age.65.and.older/data$Total.Population
data$Oct_2020_CaseRate = data$Oct_2020_Cases/data$Total.Population*100000
cor(data$Black, data$Oct_2020_CaseRate)
linear.1 <- lm(Oct_2020_Cases/Total.Population ~ Biden_Margin+ Density + Testing + Income + Boomers + Black + White + Asian + Hispanic,
data=data)
summ(linear.1)
cor(data$Biden_Margin, data$Black)
cor(data$Biden_Margin, data$White)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin+ Density + Testing + Income + Boomers + Black + White + Asian + Hispanic,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_CaseRate ~ Biden_Margin+ Density + Testing + Income + Boomers + Black + White + Asian + Hispanic,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_CaseRate ~ Biden_Margin+ Density + Testing + Income + Boomers,
data=data)
summ(linear.1)
Black + White + Asian + Hispanic
linear.1 <- lm(Oct_2020_CaseRate ~ Biden_Margin+ Density + Testing + Income + Boomers + Black + White + Asian + Hispanic,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_CaseRate ~ Biden_Margin+ Density + Testing + Income +  Black + White + Asian + Hispanic,
data=data)
summ(linear.1)
linear.1 <- lm(deathIncrease ~ Biden_Margin+ Density + Testing + Income + Boomers + Black + White + Asian + Hispanic,
data=data)
summ(linear.1)
linear.1 <- lm(deathIncrease ~ Biden_Margin+ Density + Testing + Income + Boomers +  White + Asian + Hispanic,
data=data)
summ(linear.1)
linear.1 <- lm(deathIncrease ~ Biden_Margin+ Density + Testing + Income + Boomers + Black + White + Asian + Hispanic,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin+ Density + Testing + Income + Boomers + Black + White + Asian + Hispanic,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_DeathRate ~ Biden_Margin+ Density + Income + Boomers + Black + White + Asian + Hispanic,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_CaseIncrease ~ Biden_Margin,
data=data)
summ(linear.1)
linear.1 <- lm(Oct_2020_CaseIncrease ~ Biden_Margin,
data=data)
summ(linear.1)
linear.1 <- lm(CaseIncrease ~ Biden_Margin,
data=data)
summ(linear.1)
linear.1 <- lm(caseIncrease ~ Biden_Margin,
data=data)
summ(linear.1)
linear.1 <- lm(deathIncrease ~ Biden_Margin,
data=data)
summ(linear.1)
countydata <- read.csv("sources/matched.csv")
countydata$SeptCases = countydata$Cases.9.30.2020-countydata$Cases.8.31.2020
countydata$SeptCases = (countydata$Cases.9.30.2020-countydata$Cases.8.31.2020)/countydata$Population_2019
linear.2 = lm(SeptCases ~ diff)
linear.2 = lm(SeptCases ~ diff,
data = countydata)
summ(linear.2)
countydata$SeptCases = (countydata$Cases.9.30.2020-countydata$Cases.8.31.2020)/countydata$Population_2019*100000
linear.2 = lm(SeptCases ~ diff,
data = countydata)
summ(linear.2)
countydata$SeptCases = (countydata$Cases.9.30.2020-countydata$Cases.8.31.2020 -(countydata$Cases.7.31.2020-countydata$Cases.6.30.2020))/countydata$Population_2019*100000
linear.2 = lm(SeptCases ~ diff,
data = countydata)
summ(linear.2)
linear.2 = lm(SeptCases ~ diff + Population.Density,
data = countydata)
summ(linear.2)
linear.2 = lm(Cases.9.30.2020 ~ diff + Population.Density,
data = countydata)
summ(linear.2)
